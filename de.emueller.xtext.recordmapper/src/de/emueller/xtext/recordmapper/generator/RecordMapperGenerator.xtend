/*
 * generated by Xtext
 */
package de.emueller.xtext.recordmapper.generator

import de.emueller.xtext.recordmapper.recordMapper.BaseType
import de.emueller.xtext.recordmapper.recordMapper.Declaration
import de.emueller.xtext.recordmapper.recordMapper.Field
import de.emueller.xtext.recordmapper.recordMapper.Object
import de.emueller.xtext.recordmapper.recordMapper.RecordMappperFile
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import de.emueller.xtext.recordmapper.recordMapper.Type
import java.util.List

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class RecordMapperGenerator implements IGenerator {
	
	private final String ENUM = "enum"
	private final String OBJECT = "object"
	
	private final val typeMapping = newLinkedHashMap(
		'string' -> ('String' -> ''),
		'int' -> ('Int' -> ''),
		'double' -> ('Double' -> ''),
		'bool' -> ('Boolean' -> ''),
		'datetime' -> ('Datetime' -> 'org.joda.time.DateTime') 
	)
	
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val recordFile = resource.contents.head as RecordMappperFile 
		val buffer = new StringBuffer
		
		for (declaration : recordFile.declarations) {
			
			if (isEnum(declaration)) {
				
			} else if (isObject(declaration)) {
				
			}
//    			buffer.append("case class " + record.name + "(\n");
//				
//				for (field : record.fields) {
//					buffer.append("\t" + field.name + ": " + toAPIField(field) + "\n")					
//				}
//				buffer.append(")\n\n")
		}
		
//		buffer.append(imports)
//		buffer.append(body)
		
//		for (enumeration : recordFile.eums) {
//			buffer.append("object " + enumeration.name + " extends Enumeration {\n");
//				
//			for (constant : enumeration.ids) {
//				buffer.append("\tval " + constant + " = Value(\"" + constant.toLowerCase + "\")\n") 					
//			}
//			buffer.append("}\n\n")
//		}
		
		fsa.generateFile("main/Fields.scala", buffer.toString)
	}
	
	def isEnum(Declaration decl) {
		return decl.name == ENUM
	}
	
	def isObject(Declaration decl) {
		return decl.name == OBJECT
	}
	
	def toScala(Type type, List<String> imports, StringBuffer body) {
		
	}
	
	def toObject(Object objectDecl) {
		'''
		case class «objectDecl.name» (
		«FOR field : objectDecl.fields»
			«field.name» : «lookupScalaType(field)»
		«ENDFOR»
		)
		'''
	}
	
	def toScala(de.emueller.xtext.recordmapper.recordMapper.Enum enumDecl, List<String> imports, StringBuffer body) {
		'''
		object «enumDecl.name» extends Enumeration {
			«FOR value : enumDecl.values»
				
			«ENDFOR»
		}
		'''
	}
	
	def toScala(BaseType baseType, List<String> imports, StringBuffer body) {
		
	}

	
	def lookupScalaType(Field field) {
		
	}
	
	def toAPIField(Field field) {
		if (field.type == 'string') {
			"String"
		} else if (field.type == 'int') {
			"Int"
		}
	}
	
//	protected def toHtml(Survey survey, Page page) '''
//		<html>
//		<head>
//			<title>«survey.getTitle()»</title>
//			<meta name="viewport" content="width=device-width, initial-scale=1.0">
//			<!-- Bootstrap -->
//			<link href="css/bootstrap.css" rel="stylesheet" media="screen">
//			<link href="css/survey.css" rel="stylesheet" media="screen">
//		</head>
//			<body>
//				<script src="http://code.jquery.com/jquery.js"></script>
//				<script src="js/bootstrap.js"></script>
//				<div class="navbar">
//						<div class="navbar-inner">
//							<a class="brand" href="/">«survey.getTitle()»</a>
//							<ul class="nav pull-right">
//								<li><a href="/evaluate">Evaluate</a></li>
//							</ul>
//						</div>
//					</div>
//					
//					<div class="container">
//						<form class="form-horizontal" method="POST" action="dispatch" class="form-horizontal">
//							<input name="survey" type="hidden" value="«survey.getName()»"/>
//							<input name="page" type="hidden" value="«page.getName()»"/>
//							
//							«FOR question: page.getQuestions()»
//								«controlGroup(question)»
//							«ENDFOR»
//							
//							<div class="control-group">
//								<div class="controls">
//									<input type="reset" class="btn" value="Reset">
//									<input type="submit" class="btn" value="Next">
//								</div>
//							</div>
//						</form>
//					</div>
//			</body>
//		</html>
//	'''
//	
//	protected def dispatch controlGroup(FreeTextQuestion question) '''
//		<div class="control-group">
//			<label class="control-label">«question.getText()»</label>
//			<div class="controls">
//				<input type="text" name="«question.getName()»">
//			</div>
//		</div>
//	'''
//	
//	protected def dispatch controlGroup(ChoiceQuestion question) {
//		val buttonType = if(question.isSingle()) 'radio' else 'checkbox'
//		'''
//			<div class="control-group">
//				<label class="control-label">«question.getText()»</label>
//				<div class="controls">
//					«FOR choice: question.getChoices()»
//						<label class="«buttonType»">
//							<input type="«buttonType»" name="«question.getName()»" value="«choice.getName()»"/>«choice.getText()»
//							«IF choice.isFreetext()»
//								&nbsp;<input type="text" name="«choice.getName()»">
//							«ENDIF»
//						</label>
//					«ENDFOR»
//				</div>
//			</div>
//		'''
//	}
//
//	protected def getName(Choice choice) {
//		choice.name ?: 'answer_' + (choice.eContainer as ChoiceQuestion).choices.indexOf(choice) 
//	}
//	
//	def toPageFlow(Survey survey) '''
//		package main;
//		
//		import de.emueller.recordmapper.runtime.IFormState;
//		import de.emueller.recordmapper.runtime.IPageFlow;
//		
//		public class PageFlow implements IPageFlow {
//			
//			public String getFirstPage() {
//				return "«survey.getPages().head.name»";
//			}
//			
//			public String getNextPage(IFormState formState) {
//				String currentPage = formState.getCurrentPage();
//				if(currentPage == null)
//					return getFirstPage();
//				«FOR page: survey.getPages().filter[!followUps.empty]»
//				if("«page.name»".equals(currentPage)) {
//					«FOR followUp : page.followUps»
//						«IF followUp.guard != null»
//							if("«followUp.guard.answer.name»".equals(formState.getValue("«followUp.guard.question.name»"))) {
//								return "«followUp.next.name»";
//							}
//						«ELSE»
//							return "«followUp.next.name»";
//						«ENDIF»
//					«ENDFOR»
//				}
//				«ENDFOR»
//				return null;
//			}
//		}
//	'''
}
